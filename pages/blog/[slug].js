// components
import ReactMarkdown from 'react-markdown';
import Head from 'next/head';
// -- custom
import HeroImage from '../../components/HeroImage/HeroImage.jsx';
import SeoDate from '../../components/SeoDate/SeoDate.jsx';
import NoData from '../../components/NoData/NoData.jsx';

// utils
import { queryStrapi } from '../../utils/query-strapi';

// styles
import styles from '../../styles/pages/Article.module.scss';

// constants
import {
  GET_ALL_ARTICLE_SLUGS,
  GET_ARTICLE_BY_SLUG,
} from '../../graphql/queries.js';

export default function Article({ article }) {
  const { title, content, splash, createdAt, linkToOriginal } = article;
  const splashImageUrl = splash.data[0]?.attributes.url;
  const splashImageAlt = splash.data[0]?.attributes.alternativeText;

  return (
    <>
      <Head>
        <title>{`${
          typeof title !== 'undefined' ? title : 'Article not found'
        } | FreeRoam`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {article ? (
        <article className={styles.article}>
          {splashImageUrl && (
            <HeroImage src={splashImageUrl} alt={splashImageAlt} />
          )}

          <header className={styles['article-header']}>
            <h1>{title}</h1>
            <SeoDate className={styles.date} dateString={createdAt} />
          </header>

          <section className={styles['article-body']}>
            <ReactMarkdown>{content}</ReactMarkdown>

            <p>
              <strong>Disclaimer:</strong> Article content is presentational
              only. Full credit for this article goes to the author(s).
            </p>
            {linkToOriginal ? (
              <p>
                <strong>Original article:</strong>{' '}
                <a
                  href={linkToOriginal}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {title}
                </a>
              </p>
            ) : null}
          </section>
        </article>
      ) : (
        <section className={styles['no-article']}>
          <NoData />
        </section>
      )}
    </>
  );
}

export async function getStaticPaths() {
  const { articles } = await queryStrapi(GET_ALL_ARTICLE_SLUGS);

  // Generate paths array, passing article slug as params
  const paths = articles.data.map((article) => ({
    params: { slug: article.attributes.slug },
  }));

  return {
    paths,
    fallback: 'blocking',
  };
}

export async function getStaticProps({ params }) {
  const { articles } = await queryStrapi(GET_ARTICLE_BY_SLUG(params.slug));

  return {
    props: { article: articles.data[0].attributes },
    revalidate: 10,
  };
}
