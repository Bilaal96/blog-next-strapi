// components
import ReactMarkdown from 'react-markdown';
import Head from 'next/head';
// -- custom
import HeroImage from '../../components/HeroImage/HeroImage.jsx';
import SeoDate from '../../components/SeoDate/SeoDate.jsx';

// styles
import styles from '../../styles/pages/Article.module.scss';

// constants
import { STRAPI_URL } from '../../constants';

export default function Article({ article }) {
  const { title, content, splash, createdAt } = article;
  const splashImageUrl = splash.data[0].attributes.url;

  return (
    <>
      <Head>
        <title>{title} | FreeRoam</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <article className={styles.article}>
        {splashImageUrl && <HeroImage imageUrl={splashImageUrl} />}

        <header className={styles['article-header']}>
          <h1>{title}</h1>
          <SeoDate className={styles.date} dateString={createdAt} />
        </header>

        <section className={styles['article-body']}>
          <ReactMarkdown>{content}</ReactMarkdown>
        </section>
      </article>
    </>
  );
}

export async function getStaticPaths() {
  // Per page, fetch article slug
  const fetchOptions = {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify({
      query: `{
        articles {
          data {
            attributes {
              slug
            }
          }
        }
      }`,
    }),
  };
  const response = await fetch(`${STRAPI_URL}/graphql`, fetchOptions);
  const result = await response.json();
  const { articles } = result.data;

  // Generate paths array, passing article slug as params
  const paths = articles.data.map((article) => ({
    params: { slug: article.attributes.slug },
  }));

  return {
    paths,
    fallback: false,
  };
}

export async function getStaticProps({ params }) {
  const fetchOptions = {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify({
      query: `{
        articles(filters: { slug: {eq: "${params.slug}"} }) {
          data {
            attributes {
              title
              description
              content
              slug
              splash {
                data {
                  attributes {
                    url
                  }
                }
              }
              createdAt
              publishedAt
              updatedAt
            }
          }
        }  
      }`,
    }),
  };
  const response = await fetch(`${STRAPI_URL}/graphql`, fetchOptions);
  const result = await response.json();

  const { articles } = result.data;

  return {
    props: { article: articles.data[0].attributes },
  };
}
